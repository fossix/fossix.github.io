<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>snippets on Fossix</title><link>https://fossix.org/categories/snippets/</link><description>Recent content in snippets on Fossix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Oct 2020 10:28:45 +0530</lastBuildDate><atom:link href="https://fossix.org/categories/snippets/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing containers in Linux</title><link>https://fossix.org/posts/2020-10-01-cointainers/</link><pubDate>Thu, 01 Oct 2020 10:28:45 +0530</pubDate><guid>https://fossix.org/posts/2020-10-01-cointainers/</guid><description>Creating Containers A basic contianer can be created with minimal amount of code.
Container struct container { char *name; char *rootfs; char *cmd; void *stack; }; struct container *new_container(char *name, char *rootfs, char *cmd) { struct container *c; c = calloc(sizeof(struct container), 1); if (!c) err(errno, &amp;quot;Container&amp;quot;); c-&amp;gt;name = strdup(name); c-&amp;gt;rootfs = strdup(rootfs); c-&amp;gt;cmd = strdup(cmd); if (!c-&amp;gt;name || !c-&amp;gt;rootfs || !c-&amp;gt;cmd) err(errno, &amp;quot;Container&amp;quot;); return c; } Cloning Process Clone process using the `clone` system call with the appropriate namespace flags to create a new namespace for the contianer.</description></item><item><title>Go's json marshal</title><link>https://fossix.org/posts/2018-09-11-go-json-marhsal-empty-slice/</link><pubDate>Tue, 11 Sep 2018 11:16:17 +0700</pubDate><guid>https://fossix.org/posts/2018-09-11-go-json-marhsal-empty-slice/</guid><description>When marshalling, if the variable reference is nil then json lib encodes it as nil. But for an empty slice the preferrence is to have [].</description></item><item><title>Dockerize go programs</title><link>https://fossix.org/posts/2018-08-14-golang-docker/</link><pubDate>Tue, 14 Aug 2018 11:29:17 +0530</pubDate><guid>https://fossix.org/posts/2018-08-14-golang-docker/</guid><description>Assume this is the production grade program we need to dockerize and run.
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;saying hello to the world&amp;quot;) } FROM golang:1.10-alpine as builder WORKDIR /go/src/github.com/shabinesh/prog COPY main.go . COPY vendor ./vendor RUN CGO_ENABLED=0 go build -o main . FROM alpine:latest RUN apk --no-cache add ca-certificates WORKDIR / COPY --from=0 /go/src/github.com/shabinesh/prog/main . CMD [&amp;quot;./main&amp;quot;]</description></item></channel></rss>