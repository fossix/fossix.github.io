<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blogs on Fossix</title><link>https://fossix.org/categories/blogs/</link><description>Recent content in blogs on Fossix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Dec 2018 11:29:17 +0530</lastBuildDate><atom:link href="https://fossix.org/categories/blogs/index.xml" rel="self" type="application/rss+xml"/><item><title>Haskell functions</title><link>https://fossix.org/posts/2018-12-22-haskool/</link><pubDate>Sun, 23 Dec 2018 11:29:17 +0530</pubDate><guid>https://fossix.org/posts/2018-12-22-haskool/</guid><description>Writing a simple named function sq :: Integer -&amp;gt; Integer sq n = n * n :: can be read as &amp;lsquo;has the type&amp;rsquo;. Here sq is the function name which takes an integer and returns an integer.
mul :: Integer -&amp;gt; Integer -&amp;gt; Integer mul a b = a * b the first line is type signature, while this is useful, it is not required, as haskell compiler can infer the type automatically.</description></item><item><title>Concurrency notes</title><link>https://fossix.org/posts/2018-11-14-golang-concurrency/</link><pubDate>Wed, 14 Nov 2018 11:29:17 +0530</pubDate><guid>https://fossix.org/posts/2018-11-14-golang-concurrency/</guid><description>Deadlock package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) type value struct { mu sync.Mutex v int } var wg sync.WaitGroup func print(i, j *value) { defer wg.Done() i.mu.Lock() defer i.mu.Unlock() time.Sleep(2 * time.Second) j.mu.Lock() defer j.mu.Unlock() fmt.Print(i.v + j.v) } func main() { a := &amp;amp;value{v: 1} b := &amp;amp;value{v: 2} var wg sync.WaitGroup wg.Add(2) go print(a, b) go print(b, a) wg.Wait() fmt.Println(&amp;quot;reached here?&amp;quot;) } Are they meeting coffman conditions:</description></item><item><title>Elegant Time</title><link>https://fossix.org/posts/2018-02-15-elegant-time-pref-in-go/</link><pubDate>Mon, 25 Dec 2017 11:29:17 +0530</pubDate><guid>https://fossix.org/posts/2018-02-15-elegant-time-pref-in-go/</guid><description>I often write debug logs with this below piece of code to print how much time a function took
func upload() { start := time.Now() // processing fmt.Println(&amp;quot;uploaded in %s secs&amp;quot;, time.Now().Sub(start)) } thats two lines, plus I should always remember to write that last line of code, With Golang&amp;rsquo;s deferred function it just one line
func totalTime(t time.Time) { fmt.Print(time.Now().Sub(t)) } func main() { defer totalTime(time.Now()) time.Sleep(1*time.Second) fmt.Println(&amp;quot;Hello, playground&amp;quot;) } Here we use the fact of deferred function that arguments are evaluated first and the function is called after return of callee.</description></item></channel></rss>