<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>articles on Fossix</title><link>https://fossix.org/categories/articles/</link><description>Recent content in articles on Fossix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Oct 2020 16:52:00 +0530</lastBuildDate><atom:link href="https://fossix.org/categories/articles/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding big numbers</title><link>https://fossix.org/posts/2020-10-02-big-number-addition/</link><pubDate>Fri, 02 Oct 2020 16:52:00 +0530</pubDate><guid>https://fossix.org/posts/2020-10-02-big-number-addition/</guid><description>One of the most frequently asked interview questions: How do you add arbitrarily large number? Or a variation of that: Add nodes of two singly linked lists, producing a third list. Let&amp;rsquo;s progressively look into how to do this more efficiently moving away from the interview problem.</description></item><item><title>More kernel development using qemu</title><link>https://fossix.org/posts/2017-07-04-powerpc-kernel-development-on-qemu-2/</link><pubDate>Sat, 22 Jul 2017 11:59:05 +0530</pubDate><guid>https://fossix.org/posts/2017-07-04-powerpc-kernel-development-on-qemu-2/</guid><description>Building and booting a full distro kernel on qemu for powerpc</description></item><item><title>Kernel development using qemu</title><link>https://fossix.org/posts/2017-06-22-powerpc-kernel-development-on-qemu/</link><pubDate>Wed, 05 Jul 2017 12:26:46 +0530</pubDate><guid>https://fossix.org/posts/2017-06-22-powerpc-kernel-development-on-qemu/</guid><description>Hack, build, boot kernel on a powerpc using qemu</description></item><item><title>Command Line for beginners - Email</title><link>https://fossix.org/posts/2013-07-29-command-line-for-beginners/</link><pubDate>Wed, 29 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-29-command-line-for-beginners/</guid><description>There are a vast number of mail clients available to choose from for our everyday usage. But as Michael Elkins said, all mail clients suck. So there must be some way we could make one of those suckers suck less.
Most mail clients are GUI based. But I am going to talk about command line mail clients, and specifically about mutt, because this one sucks less, and that’s what I use.</description></item><item><title>Intro To Assembly Programming From A Dummy</title><link>https://fossix.org/posts/2013-07-29-assembly-programming-intro/</link><pubDate>Wed, 29 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-29-assembly-programming-intro/</guid><description>We are all comfortable writing code in high level languages like C, and some would even argue C is not a high level language like Java, or Python etc. But the truth is the more you go closer to the silicon, the more speed you get, trading away the traits of high level design (readability, maintainability etc). Here is an example of this.
Long long ago, so long ago, I was seeing so many executable programs in my ~/bin directory, disturbing the auto-completion in the CLI.</description></item><item><title>Developing android app the fun way</title><link>https://fossix.org/posts/2013-07-28-developing-android-app-the-fun-way/</link><pubDate>Tue, 28 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-28-developing-android-app-the-fun-way/</guid><description>Android is the buzz word right now. This is a great time for developers and users alike. But we still have the distinction of &amp;ldquo;developers&amp;rdquo; and &amp;ldquo;end users&amp;rdquo;. That difference is set to blur now.
The pre-requisite for writing an android application was Knowledge of the Java programming language. With the introduction of Android Scripting Engine (ASE), Python developers too can join the fun. But still we have the user/developer distinction.</description></item><item><title>Program Sections</title><link>https://fossix.org/posts/2013-07-26-program-sections/</link><pubDate>Sun, 26 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-26-program-sections/</guid><description>Every program is split into multiple sections. In general, these are:
The code segment containing executable code The stack segment Data segment, which constitute the following: BSS Uninitialized data Heap Memory allocated during run time Data Initialized data They are just the defaults, there can be many more sections in a binary. For example our sample code contains the following different sections.
$ objdump -h a.out Most of the section compiled into the binary is either empty or just debugging information.</description></item><item><title>The exec() system call</title><link>https://fossix.org/posts/2013-07-25-the-exec-system-call/</link><pubDate>Sat, 25 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-25-the-exec-system-call/</guid><description>After a successful fork() the child process will start to execute the command typed by the user, in our case the a.out file. This execution is started by the exec system call. The job of the system call is to overlay the calling process’ address space with the executable image and give control to it. The exec() syscall does the following functions:
The files shared by the parent and child processes are unshared, a new unknown executable shouldn’t be sharing files with the shell The executable file is opened and checked for permissions whether the new file has executable and open permission for the current user.</description></item><item><title>The fork() system call</title><link>https://fossix.org/posts/2013-07-24-the-fork-system-call/</link><pubDate>Fri, 24 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-24-the-fork-system-call/</guid><description>As we know system calls take us from the user-land to the kernel-land. As mentioned earlier this article will describe even the very obvious details, so pardon the gory details. The different things that happen in the kernel during the start up of a process is what we will discuss in this section.
As seen in the last code listing, the shell does a fork() and calls exec family of system calls to overlay the command image onto the newly created child process’ address space.</description></item><item><title>In-house Audio Streaming</title><link>https://fossix.org/posts/2013-07-23-in-house-audio-streaming/</link><pubDate>Thu, 23 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-23-in-house-audio-streaming/</guid><description>Lots of users have gigabytes of music in their personal computer, but every time when we want to listen to music on our portable device, we need to copy selectively some songs to the device and then listen. You can listen to all the songs from your PC itself. But what if your girl friend wants to watch videos and you have only one computer in your house? Now stop fighting, leave the computer with you girl friend and start your music stream to connect from your Android or any mobile with streaming audio playback support.</description></item><item><title>SOLID principles in Golang</title><link>https://fossix.org/posts/2017-03-23-solid-principals/</link><pubDate>Thu, 23 Mar 2017 11:39:17 +0530</pubDate><guid>https://fossix.org/posts/2017-03-23-solid-principals/</guid><description>As a precursor to the common design pattern in game dev which is possibly a follow up post. The credits for any information put up here goes to Dave Cheney from where I have derived this material.
What is SOLID? The SOLID principles are the top five, rather important patterns usually found the Object oriented programming languages. Ref: Wikipedia
However the post is not intended to learn these principles, there are much better resources elsewhere for that.</description></item><item><title>Android Interview Questions</title><link>https://fossix.org/posts/2014-07-09-android-interview-questions/</link><pubDate>Sat, 18 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2014-07-09-android-interview-questions/</guid><description>Here is a list of interview questions related to android , will update this list soon with more questions and with their answers.
What is the importance of Android in the mobile market? What do you think are some disadvantages of Android and why? What is adb? What is ANR ? Which elements can occur only once and must be present? Is there a case wherein other qualifiers in multiple resources take precedence over locale ?</description></item><item><title>C++ - Creating Transparent Dialog</title><link>https://fossix.org/posts/2014-07-18-creating-transparent-dialog/</link><pubDate>Sat, 18 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2014-07-18-creating-transparent-dialog/</guid><description>This is a simple trick to make a transparent dialog without making its child controls transparent. We can set the opacity and transparency color key of a layered window.
To know more about layered window you can click here
I used SetLayeredWindowAttributes with LWA_COLORKEY to replace a color with transparency, in order to achieve a transparent background. Set the background color of the dialog which is not used in the application.</description></item><item><title>Generate unique IDs</title><link>https://fossix.org/posts/2013-08-01-generate-unique-ids/</link><pubDate>Sat, 18 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-08-01-generate-unique-ids/</guid><description>Inspired by Instagram’s method to generate unique id’s. I just tried to write a program which does the same. Before that, why this? In the case of Instagram, they had their database sharded, with so many insertions in a second, each new record needs a unique id where databases auto increment doesn’t work and also place where you need to have id which are time sortable. The below is the program and it’s explanation.</description></item><item><title>Linux Interview Questions</title><link>https://fossix.org/posts/2014-07-18-linux-interview-questions/</link><pubDate>Sat, 18 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2014-07-18-linux-interview-questions/</guid><description>Linux Internals What are different IPC there in a OS? What is a semaphore? What is a mutex? What is the difference between semaphore and mutex? What are different types of CPU scheduling available? What is a preemption of a task? What is a context switching? What is a round robin policy? What is a different between pipes and named pipes? What are shared and Archive libraries? what is Priority Inversion?</description></item><item><title>System Programming Interview Questions</title><link>https://fossix.org/posts/2014-06-24-system-programming-questions/</link><pubDate>Sat, 18 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2014-06-24-system-programming-questions/</guid><description>How will you write a driver for a device? Design parameter..? Have you used IPC mechanism? Define individual pros and cons. Are you aware about Linux Memory Management? How will you allocate memory in interrupt handler? What are the things you care while writing an interrupt handler? What are physical address and virtual address? Why we use virtual address? Why (void *) is used when passing an argument in pthread_create()?</description></item><item><title>Twitter From The Command Line</title><link>https://fossix.org/posts/2009-08-30-twitter-from-the-commandline/</link><pubDate>Sat, 18 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2009-08-30-twitter-from-the-commandline/</guid><description>Twitter has become popular with many of us recently. Most of us are too lazy to use the web interface to do a update. So there are options like twitter for firefox, twitgin for pidgin and so on. But still most of are CLI oriented and rarely visit the GUI. I am one such guy. So when I came to hear about Twitter API, I was excited and started to write a simple python script to update to Twitter.</description></item><item><title>Searching for files?</title><link>https://fossix.org/posts/2010-06-29-searching-for-files/</link><pubDate>Thu, 16 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-06-29-searching-for-files/</guid><description>Nobody is a exception for searching files unless you don’t have a computer. here are two commands you must learn if you are a beginner. find command
$ find /path/ -name file_name example:
$ find . -name &amp;quot;date*&amp;quot; Notice the ‘.’ which says search in the current directory for files starting with &amp;ldquo;date&amp;rdquo; , you can use your regular expression skill here. And you if you want to search for file starting from the root just replace ‘.</description></item><item><title>Virtual Host Running on apache</title><link>https://fossix.org/posts/2013-07-29-virual-host-apache/</link><pubDate>Thu, 16 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-29-virual-host-apache/</guid><description>History I had Drupal configured and running on my machine, this was good. But understanding Drupal and going ahead with it became a trouble. so I wanted to go with plain PHP scripting, so next step was to create a new server for the new website.
Problem I configured the apache2 for the additional virtual host using this Debian link. But my new URL was not working. When we restart apache2 or reload, we get warning on NameVirtualHost *:80.</description></item><item><title>Go's Reflection</title><link>https://fossix.org/posts/2017-03-08-go-reflection/</link><pubDate>Wed, 08 Mar 2017 11:39:17 +0530</pubDate><guid>https://fossix.org/posts/2017-03-08-go-reflection/</guid><description>Go&amp;rsquo;s reflection Reflection is used by the Go program to inspect types at runtime. Some understanding of Go&amp;rsquo;s interface{} is required before proceeding.
Consider a hypothetical requirement to build a validation for structures. In usual case I would prefer a if-else statement.
type Employee struct { Name string `json:&amp;quot;name&amp;quot;` Address string `json:&amp;quot;address&amp;quot;` Age int `json:&amp;quot;age&amp;quot;` } var e Employee err := json.Unmarshal(data, &amp;amp;e) // validate each field if e.Name == &amp;quot;&amp;quot; { log.</description></item><item><title>Sending SMS from the command line in Jolla</title><link>https://fossix.org/posts/2014-10-10-sms-from-commandline-in-jolla/</link><pubDate>Fri, 10 Oct 2014 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2014-10-10-sms-from-commandline-in-jolla/</guid><description>Without much ado, here is the entire script which I had written, works really well expect when you need to add a new group. A new group is added when sending the SMS, but the same group is not used when the message is received (I was testing sending SMS to myself), I didn’t try really hard after this discovery!! Add a new group for yourself and you should get a random funny message added in your UI (Sailfish people are not boring you know!</description></item><item><title>Call Stack for Beginners - Part 1</title><link>https://fossix.org/posts/2014-07-19-call-stack-basics/</link><pubDate>Sat, 19 Jul 2014 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2014-07-19-call-stack-basics/</guid><description>Every process, no matter how it came into being, has at least one stack for the purpose of running itself. The programming language can be anything but it needs a stack to run. As usual is the custom we will write a c program to explain the concepts in a more detail. Before that we will have a basic understanding of why a stack is used and what’s its purpose (If you are really new to this world, then you should see what is stack first).</description></item><item><title>Debuggin Linux Kernel using JTAG (In ARM)</title><link>https://fossix.org/posts/2014-08-01-debugging-kernel-using-jtag/</link><pubDate>Sat, 19 Jul 2014 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2014-08-01-debugging-kernel-using-jtag/</guid><description>Build a kernel with symbols.
make menuconfig -&amp;gt; kernel hacking -&amp;gt; Select Compile the kernel with debug info. This will create a elf image (vmlinux) with can be understood by the trace32. The best choice is to use a uncompressed kernel. ake the following changes to cmm files.
Remove the aborts. Aborts are normal after mmu is initalized, so if you let the Debugger break for aborts, you will be aborting for ever.</description></item><item><title>Openstack - How To Attach To An Autoscaling Group Or An Arbitrary Group Of Nodes</title><link>https://fossix.org/posts/2014-10-07-openstack-autoscaling/</link><pubDate>Sat, 19 Jul 2014 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2014-10-07-openstack-autoscaling/</guid><description>In order to use a load balancer with an autoscaling group- we should use a nested stack to achieve. We can define the AutoScaling Group and LoadBalancer pool in the top level template and define the autoscaling instance and members in the nested templates. Then the loadbalancer pool id can be passed into the nested template as a property and be used by OS::Neutron::PoolMember to associate each nova server when they are created.</description></item><item><title>What next after buying Jolla</title><link>https://fossix.org/posts/2014-10-04-next-steps-after-buying-jolla/</link><pubDate>Sat, 19 Jul 2014 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2014-10-04-next-steps-after-buying-jolla/</guid><description>A Jolla phone’s Sailfish OS is just like any other Linux distribution. Like you use KDE or Gnome or Mate et cetra in your Desktop, this uses Lipstick as its UI. So the underlying filesystem and everything else is the same as you know from your Desktop. To get a feel you can enable developer mode and ssh into the phone. How do we do this?
Settings -&amp;gt; System -&amp;gt; Developer Mode -&amp;gt; Click on Developer Mode Now you will see a terminal in your apps screen.</description></item><item><title>Dynamic linker and loader</title><link>https://fossix.org/posts/2013-07-27-dynamic-linker-and-loader/</link><pubDate>Sat, 27 Jul 2013 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-27-dynamic-linker-and-loader/</guid><description>As you would have noticed the beginning of the document, it was told the explanation will be based on the program we had written earlier in this series. The program was compiled using the command
$ cc sample-source.c -lm As you have probably noticed, we are linking the program with the math library. This was done intentionally to explain the dynamic loader. Any file can be identified using the file command.</description></item><item><title>The Birth of a Process</title><link>https://fossix.org/posts/2013-07-23-the-birth-of-a-process/</link><pubDate>Tue, 23 Jul 2013 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-23-the-birth-of-a-process/</guid><description>A process is born when a program is executed. So let us back-track a little more and start from the program birth. The program is born when there is a need for the programmer. So now I have a need to write a program so that I could create a process out of it and start explaining what happens along the way. The following is the sample code used for explaining various concepts in the rest of the article.</description></item><item><title>Program Compilation - An introduction</title><link>https://fossix.org/posts/2013-07-21-program-compilation-an-introduction/</link><pubDate>Sun, 21 Jul 2013 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-21-program-compilation-an-introduction/</guid><description>As we already know the compilation process involves four steps,
Pre-processing the source file Compiling the source file to assembly The assembly code is assembled to the object code Linking the object code with libraries So the actual compilation process goes like the following:
$ gcc -E prog.c &amp;gt; prog.i # pre-process $ gcc -s prog.i # assemble $ as -o prog.o prog.s # compile $ ld -dynamic-linker /lib64/ld-linux-x86-64.</description></item><item><title>The life of a Process</title><link>https://fossix.org/posts/2013-07-20-the-life-of-a-process/</link><pubDate>Sat, 20 Jul 2013 14:10:52 +0530</pubDate><guid>https://fossix.org/posts/2013-07-20-the-life-of-a-process/</guid><description>The computer system is becoming a complex beast which cannot be tamed easily. In the new world the operating systems have become too big and complex for one to learn everything in depth. Most new aspiring system programmers do not have a picture of what is happening in a system when you type ./a.out. This article is an attempt to provide the picture and also the necessary details for a Linux newcomer to grasp so that he/she can refer to more detailed books for further learning.</description></item><item><title>Emacs org-mode productivity</title><link>https://fossix.org/posts/2010-10-31-emacs-org-mode-productivity/</link><pubDate>Sun, 31 Oct 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-10-31-emacs-org-mode-productivity/</guid><description>Productivity with Emacs, org-mode and remember For productivity and time keeping I am now using orgmode in Emacs. I have a heavily customized Emacs and org-mode. I went through many web pages and tutorials and finally I have come to an agreement with myself that this setup is enough to make myself efficient and keep myself from forgetting things. I will show you what I did.
Version control The first thing I did was setup a version control system for my notes and org files.</description></item><item><title>XMPP Auto Reply Bot</title><link>https://fossix.org/posts/2010-08-23-xmpp-auto-reply-bot/</link><pubDate>Mon, 23 Aug 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-08-23-xmpp-auto-reply-bot/</guid><description>This an introduction to a simple Perl script that replies to your XMPP buddies based on key words.
This is not really a great script in terms of use, but could be fun. This is not same as auto-reply in Pidgin. This script replies to your buddies, may be you can run it while you are away. There are few key words like ‘hi’, ‘hello’, ‘hey’, ‘why’, ‘where’, ‘what’ etc. You can add few more you like.</description></item><item><title>You personal computer can be a webserver</title><link>https://fossix.org/posts/2010-08-17-personal-computer-as-webserver/</link><pubDate>Mon, 16 Aug 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-08-17-personal-computer-as-webserver/</guid><description>Running a serious web-sever from your PC could make you the glorious sucker unless you have a good network speed/bandwidth or a highly unpopular site. But its a great feeling having a web-server run from your computer, its more of thrill and fun. If you are worried about your network speed here are few tips:
try making a static page with needed information. if you are having images and other media then try to load it from external links which will greatly reduce the load on your computer/network.</description></item><item><title>Gnome Humour!</title><link>https://fossix.org/posts/2010-08-13-gnome-humour/</link><pubDate>Fri, 13 Aug 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-08-13-gnome-humour/</guid><description>Geeks always face a hard time finding girl friends. If fortunately, a geek has a girl friend, they are sure that they will find bug in their relationship and needs a Bugzilla to fix it. Here is one, read on…
Dear Gnome,
Please, have some empathy and help me out.
Because of you, my boyfriend is chronically attached to his computer and has ceased to pay attention to me.</description></item><item><title>Terminal Shortcuts! (Compilation)</title><link>https://fossix.org/posts/2010-08-09-terminal-shorcuts/</link><pubDate>Mon, 09 Aug 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-08-09-terminal-shorcuts/</guid><description>Here are few short-cuts to enhance your command line skills:
To open the default editor:
Ctrl-x Ctrl-e To execute the last command again
$ !! To use the last string of command:
$ !$ # (or) Alt+.(dot) To move
$ Ctrl-f # -&amp;gt; Forward one character. $ Ctrl-b # -&amp;gt; Backwards one character. $ Ctrl-a # —&amp;gt; Move to the beginning of the line. $ Ctrl-e # —&amp;gt; Move to the end of the line.</description></item><item><title>Find Invisible Gtalkers!</title><link>https://fossix.org/posts/2010-08-05-find-invisible-gtalkers/</link><pubDate>Thu, 05 Aug 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-08-05-find-invisible-gtalkers/</guid><description>This program below is a simple python script, that will let you find your buddies who decided to remain invisible (may be you are haunting them lately). But its now time for you to be more clever than your pal.
Before that check if you have installed the python xmpp package.
#!/usr/bin/python -Wignore import xmpp import signal import sys import getpass # catch signals, and exit for Ctrl+C def signal_handler(signal, frame): print 'Exiting.</description></item></channel></rss>