<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>containers on Fossix</title><link>https://fossix.org/tags/containers/</link><description>Recent content in containers on Fossix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Oct 2020 10:28:45 +0530</lastBuildDate><atom:link href="https://fossix.org/tags/containers/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing containers in Linux</title><link>https://fossix.org/posts/2020-10-01-cointainers/</link><pubDate>Thu, 01 Oct 2020 10:28:45 +0530</pubDate><guid>https://fossix.org/posts/2020-10-01-cointainers/</guid><description>Creating Containers A basic contianer can be created with minimal amount of code.
Container struct container { char *name; char *rootfs; char *cmd; void *stack; }; struct container *new_container(char *name, char *rootfs, char *cmd) { struct container *c; c = calloc(sizeof(struct container), 1); if (!c) err(errno, &amp;quot;Container&amp;quot;); c-&amp;gt;name = strdup(name); c-&amp;gt;rootfs = strdup(rootfs); c-&amp;gt;cmd = strdup(cmd); if (!c-&amp;gt;name || !c-&amp;gt;rootfs || !c-&amp;gt;cmd) err(errno, &amp;quot;Container&amp;quot;); return c; } Cloning Process Clone process using the `clone` system call with the appropriate namespace flags to create a new namespace for the contianer.</description></item></channel></rss>