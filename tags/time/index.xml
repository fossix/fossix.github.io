<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>time on Fossix</title><link>https://fossix.org/tags/time/</link><description>Recent content in time on Fossix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 25 Dec 2017 11:29:17 +0530</lastBuildDate><atom:link href="https://fossix.org/tags/time/index.xml" rel="self" type="application/rss+xml"/><item><title>Elegant Time</title><link>https://fossix.org/posts/2018-02-15-elegant-time-pref-in-go/</link><pubDate>Mon, 25 Dec 2017 11:29:17 +0530</pubDate><guid>https://fossix.org/posts/2018-02-15-elegant-time-pref-in-go/</guid><description>I often write debug logs with this below piece of code to print how much time a function took
func upload() { start := time.Now() // processing fmt.Println(&amp;quot;uploaded in %s secs&amp;quot;, time.Now().Sub(start)) } thats two lines, plus I should always remember to write that last line of code, With Golang&amp;rsquo;s deferred function it just one line
func totalTime(t time.Time) { fmt.Print(time.Now().Sub(t)) } func main() { defer totalTime(time.Now()) time.Sleep(1*time.Second) fmt.Println(&amp;quot;Hello, playground&amp;quot;) } Here we use the fact of deferred function that arguments are evaluated first and the function is called after return of callee.</description></item></channel></rss>