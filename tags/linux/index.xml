<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Fossix</title><link>https://fossix.org/tags/linux/</link><description>Recent content in linux on Fossix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Oct 2020 10:28:45 +0530</lastBuildDate><atom:link href="https://fossix.org/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing containers in Linux</title><link>https://fossix.org/posts/2020-10-01-cointainers/</link><pubDate>Thu, 01 Oct 2020 10:28:45 +0530</pubDate><guid>https://fossix.org/posts/2020-10-01-cointainers/</guid><description>Creating Containers A basic contianer can be created with minimal amount of code.
Container struct container { char *name; char *rootfs; char *cmd; void *stack; }; struct container *new_container(char *name, char *rootfs, char *cmd) { struct container *c; c = calloc(sizeof(struct container), 1); if (!c) err(errno, &amp;quot;Container&amp;quot;); c-&amp;gt;name = strdup(name); c-&amp;gt;rootfs = strdup(rootfs); c-&amp;gt;cmd = strdup(cmd); if (!c-&amp;gt;name || !c-&amp;gt;rootfs || !c-&amp;gt;cmd) err(errno, &amp;quot;Container&amp;quot;); return c; } Cloning Process Clone process using the `clone` system call with the appropriate namespace flags to create a new namespace for the contianer.</description></item><item><title>More kernel development using qemu</title><link>https://fossix.org/posts/2017-07-04-powerpc-kernel-development-on-qemu-2/</link><pubDate>Sat, 22 Jul 2017 11:59:05 +0530</pubDate><guid>https://fossix.org/posts/2017-07-04-powerpc-kernel-development-on-qemu-2/</guid><description>Building and booting a full distro kernel on qemu for powerpc</description></item><item><title>Kernel development using qemu</title><link>https://fossix.org/posts/2017-06-22-powerpc-kernel-development-on-qemu/</link><pubDate>Wed, 05 Jul 2017 12:26:46 +0530</pubDate><guid>https://fossix.org/posts/2017-06-22-powerpc-kernel-development-on-qemu/</guid><description>Hack, build, boot kernel on a powerpc using qemu</description></item><item><title>Linux Interview Questions</title><link>https://fossix.org/posts/2014-07-18-linux-interview-questions/</link><pubDate>Sat, 18 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2014-07-18-linux-interview-questions/</guid><description>Linux Internals What are different IPC there in a OS? What is a semaphore? What is a mutex? What is the difference between semaphore and mutex? What are different types of CPU scheduling available? What is a preemption of a task? What is a context switching? What is a round robin policy? What is a different between pipes and named pipes? What are shared and Archive libraries? what is Priority Inversion?</description></item><item><title>Call Stack for Beginners - Part 1</title><link>https://fossix.org/posts/2014-07-19-call-stack-basics/</link><pubDate>Sat, 19 Jul 2014 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2014-07-19-call-stack-basics/</guid><description>Every process, no matter how it came into being, has at least one stack for the purpose of running itself. The programming language can be anything but it needs a stack to run. As usual is the custom we will write a c program to explain the concepts in a more detail. Before that we will have a basic understanding of why a stack is used and what’s its purpose (If you are really new to this world, then you should see what is stack first).</description></item><item><title>Debuggin Linux Kernel using JTAG (In ARM)</title><link>https://fossix.org/posts/2014-08-01-debugging-kernel-using-jtag/</link><pubDate>Sat, 19 Jul 2014 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2014-08-01-debugging-kernel-using-jtag/</guid><description>Build a kernel with symbols.
make menuconfig -&amp;gt; kernel hacking -&amp;gt; Select Compile the kernel with debug info. This will create a elf image (vmlinux) with can be understood by the trace32. The best choice is to use a uncompressed kernel. ake the following changes to cmm files.
Remove the aborts. Aborts are normal after mmu is initalized, so if you let the Debugger break for aborts, you will be aborting for ever.</description></item><item><title>The life of a Process</title><link>https://fossix.org/posts/2013-07-20-the-life-of-a-process/</link><pubDate>Sat, 20 Jul 2013 14:10:52 +0530</pubDate><guid>https://fossix.org/posts/2013-07-20-the-life-of-a-process/</guid><description>The computer system is becoming a complex beast which cannot be tamed easily. In the new world the operating systems have become too big and complex for one to learn everything in depth. Most new aspiring system programmers do not have a picture of what is happening in a system when you type ./a.out. This article is an attempt to provide the picture and also the necessary details for a Linux newcomer to grasp so that he/she can refer to more detailed books for further learning.</description></item><item><title>Emacs org-mode productivity</title><link>https://fossix.org/posts/2010-10-31-emacs-org-mode-productivity/</link><pubDate>Sun, 31 Oct 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-10-31-emacs-org-mode-productivity/</guid><description>Productivity with Emacs, org-mode and remember For productivity and time keeping I am now using orgmode in Emacs. I have a heavily customized Emacs and org-mode. I went through many web pages and tutorials and finally I have come to an agreement with myself that this setup is enough to make myself efficient and keep myself from forgetting things. I will show you what I did.
Version control The first thing I did was setup a version control system for my notes and org files.</description></item><item><title>You personal computer can be a webserver</title><link>https://fossix.org/posts/2010-08-17-personal-computer-as-webserver/</link><pubDate>Mon, 16 Aug 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-08-17-personal-computer-as-webserver/</guid><description>Running a serious web-sever from your PC could make you the glorious sucker unless you have a good network speed/bandwidth or a highly unpopular site. But its a great feeling having a web-server run from your computer, its more of thrill and fun. If you are worried about your network speed here are few tips:
try making a static page with needed information. if you are having images and other media then try to load it from external links which will greatly reduce the load on your computer/network.</description></item><item><title>Terminal Shortcuts! (Compilation)</title><link>https://fossix.org/posts/2010-08-09-terminal-shorcuts/</link><pubDate>Mon, 09 Aug 2010 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2010-08-09-terminal-shorcuts/</guid><description>Here are few short-cuts to enhance your command line skills:
To open the default editor:
Ctrl-x Ctrl-e To execute the last command again
$ !! To use the last string of command:
$ !$ # (or) Alt+.(dot) To move
$ Ctrl-f # -&amp;gt; Forward one character. $ Ctrl-b # -&amp;gt; Backwards one character. $ Ctrl-a # —&amp;gt; Move to the beginning of the line. $ Ctrl-e # —&amp;gt; Move to the end of the line.</description></item></channel></rss>