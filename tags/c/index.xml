<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c on Fossix</title><link>https://fossix.org/tags/c/</link><description>Recent content in c on Fossix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Oct 2020 16:52:00 +0530</lastBuildDate><atom:link href="https://fossix.org/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding big numbers</title><link>https://fossix.org/posts/2020-10-02-big-number-addition/</link><pubDate>Fri, 02 Oct 2020 16:52:00 +0530</pubDate><guid>https://fossix.org/posts/2020-10-02-big-number-addition/</guid><description>One of the most frequently asked interview questions: How do you add arbitrarily large number? Or a variation of that: Add nodes of two singly linked lists, producing a third list. Let&amp;rsquo;s progressively look into how to do this more efficiently moving away from the interview problem.</description></item><item><title>Intro To Assembly Programming From A Dummy</title><link>https://fossix.org/posts/2013-07-29-assembly-programming-intro/</link><pubDate>Wed, 29 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-29-assembly-programming-intro/</guid><description>We are all comfortable writing code in high level languages like C, and some would even argue C is not a high level language like Java, or Python etc. But the truth is the more you go closer to the silicon, the more speed you get, trading away the traits of high level design (readability, maintainability etc). Here is an example of this.
Long long ago, so long ago, I was seeing so many executable programs in my ~/bin directory, disturbing the auto-completion in the CLI.</description></item><item><title>Generate unique IDs</title><link>https://fossix.org/posts/2013-08-01-generate-unique-ids/</link><pubDate>Sat, 18 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-08-01-generate-unique-ids/</guid><description>Inspired by Instagram’s method to generate unique id’s. I just tried to write a program which does the same. Before that, why this? In the case of Instagram, they had their database sharded, with so many insertions in a second, each new record needs a unique id where databases auto increment doesn’t work and also place where you need to have id which are time sortable. The below is the program and it’s explanation.</description></item><item><title>The Birth of a Process</title><link>https://fossix.org/posts/2013-07-23-the-birth-of-a-process/</link><pubDate>Tue, 23 Jul 2013 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-23-the-birth-of-a-process/</guid><description>A process is born when a program is executed. So let us back-track a little more and start from the program birth. The program is born when there is a need for the programmer. So now I have a need to write a program so that I could create a process out of it and start explaining what happens along the way. The following is the sample code used for explaining various concepts in the rest of the article.</description></item><item><title>Program Compilation - An introduction</title><link>https://fossix.org/posts/2013-07-21-program-compilation-an-introduction/</link><pubDate>Sun, 21 Jul 2013 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-21-program-compilation-an-introduction/</guid><description>As we already know the compilation process involves four steps,
Pre-processing the source file Compiling the source file to assembly The assembly code is assembled to the object code Linking the object code with libraries So the actual compilation process goes like the following:
$ gcc -E prog.c &amp;gt; prog.i # pre-process $ gcc -s prog.i # assemble $ as -o prog.o prog.s # compile $ ld -dynamic-linker /lib64/ld-linux-x86-64.</description></item></channel></rss>