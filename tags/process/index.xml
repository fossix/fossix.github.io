<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>process on Fossix</title><link>https://fossix.org/tags/process/</link><description>Recent content in process on Fossix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Mar 2017 14:11:53 +0530</lastBuildDate><atom:link href="https://fossix.org/tags/process/index.xml" rel="self" type="application/rss+xml"/><item><title>Program Sections</title><link>https://fossix.org/posts/2013-07-26-program-sections/</link><pubDate>Sun, 26 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-26-program-sections/</guid><description>This is part of The Life of a Process series. This section explains the different sections of a program. Like the BSS, Data etc.</description></item><item><title>The exec() system call</title><link>https://fossix.org/posts/2013-07-25-the-exec-system-call/</link><pubDate>Sat, 25 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-25-the-exec-system-call/</guid><description>This is part of the series &amp;lsquo;The Life of a process&amp;rsquo;. This write-up is about the exec system call. We saw about how a process is created, but how is a new program gets loaded? Let&amp;rsquo;s see here.</description></item><item><title>The fork() system call</title><link>https://fossix.org/posts/2013-07-24-the-fork-system-call/</link><pubDate>Fri, 24 Mar 2017 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-24-the-fork-system-call/</guid><description>This is part of the series titles The Life of a Process. This part tell about how a fork system call works which is required to create a new process.</description></item><item><title>Call Stack for Beginners - Part 1</title><link>https://fossix.org/posts/2014-07-19-call-stack-basics/</link><pubDate>Sat, 19 Jul 2014 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2014-07-19-call-stack-basics/</guid><description>This is part of Life of a Process series, but this one is not an exact continuation of the where it was left, but it should be useful for the overall understanding of a process and its life.</description></item><item><title>Dynamic linker and loader</title><link>https://fossix.org/posts/2013-07-27-dynamic-linker-and-loader/</link><pubDate>Sat, 27 Jul 2013 15:12:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-27-dynamic-linker-and-loader/</guid><description>This is a part of the Life of a Process Series. This section explains how libraries are linked and loaded dynamically upon the start of execution of a program.</description></item><item><title>The Birth of a Process</title><link>https://fossix.org/posts/2013-07-23-the-birth-of-a-process/</link><pubDate>Tue, 23 Jul 2013 14:11:53 +0530</pubDate><guid>https://fossix.org/posts/2013-07-23-the-birth-of-a-process/</guid><description>This is a part of the series on Life of a Process. This section explains how a process is created from the shell.</description></item><item><title>The life of a Process</title><link>https://fossix.org/posts/2013-07-20-the-life-of-a-process/</link><pubDate>Sat, 20 Jul 2013 14:10:52 +0530</pubDate><guid>https://fossix.org/posts/2013-07-20-the-life-of-a-process/</guid><description>This is a series trying to explain the Life of a process in a Linux system. Will try to cover most of the aspects from the user space to the kernel space.</description></item></channel></rss>